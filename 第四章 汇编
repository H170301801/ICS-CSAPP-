第4章 汇编
4.1 汇编的概念与作用
【概念】
汇编是一个过程，该过程调用汇编器（as），将.s汇编代码翻译成机器语言指令，把这些指定打包成可重定位目标程序的格式，并将结果保存在.o目标文件中。（.o文件是一个二进制文件，它包含程序的指令编码）
【作用】
将.s汇编代码翻译成机器语言指令，保存在.o文件中。

4.2 在Ubuntu下汇编的命令
【命令】
as hello.s -o hello.o

 
图4.1 生成hello.o汇编文件

4.3 可重定位目标elf格式
使用命令“readelf -a hello.o > hello.elf”，获得hello.o文件的ELF格式，其组成部分如下：
1.【ELF Header】以16B的序列Magic开始，Magic描述了生成该文件的系统 的字的大小和字节顺序，ELF头剩下的部分包含帮助链接器语法分析和解释目标文件的信息，其中包括ELF头的大小、目标文件的类型、机器类型、字节头部表（section header table）的文件偏移，以及节头部表中条目的大小和数量等信息。

 
图4.2 ELF Header

	2.【Section Headers】节头部表，包含了文件中出现的各个节的语义，包括节 的类型、位置和大小等信息。

 
图4.3 Section Headers

	3.【Relocation section .rela.text 】这是一个重定位节。一个.text 节中位置的列表，包含.text 节中需要进行重定 位的信息，当链接器把这个目标文件和其他文件组合时，需要修改这些位 置。如图 4.4，图中 8 条重定位信息分别是对.L0（第一个printf中的字符串）、puts 函数、exit 函数、.L1（第二个printf中的字符串）、printf 函数、sleepsecs、sleep 函数、getchar 函数进行重定位声明。  

 
图4.4 重定位节.rela.text

	.rela节包含的信息有：
Offset	需要重新定向的代码块在.text或.data节中的偏移位置，8B。
Info	包括symbol（占前4B）和type（占后4B）两部分。symbol代表重定位到的目标在.symtab中的偏移量，type代表重定位的类型。
Addend	计算重定位位置的辅助信息，占8B。
Type	重定位到的目标的类型
Name	重定位到的目标的名称

	下面以.L1 的重定位为例阐述之后的重定位过程：链接器根据 info 信息 向.symtab 节中查询链接目标的符号，由 info.symbol=0x05，可以发现重定位目标 链接到.rodata 的.L1，设重定位条目为 r，根据图 4.5 知 r 的构造为： 
r.offset=0x18, r.symbol=.rodata, r.type=R_X86_64_PC32, r.addend=-4，
重定位一个使用 32 位 PC 相对地址的引用。计算重定位目标地址的算法如 下（设需要重定位的.text 节中的位置为 src,设重定位的目的位置 dst）：  
refptr = s +r.offset （1） 
refaddr = ADDR(s) + r.offset （2） 
*refptr = (unsigned) (ADDR(r.symbol) + r.addend-refaddr)（3） 
其中（1）指向 src 的指针（2）计算 src 的运行时地址，（3）中， ADDR(r.symbol)计算 dst 的运行时地址，在本例中，ADDR(r.symbol)获得 的是 dst 的运行时地址，因为需要设置的是绝对地址，即 dst 与下一条指令 之间的地址之差，所以需要加上 r.addend=-4。 
之后将 src 处设置为运行时值*refptr，完成该处重定位。

 
图4.5 hello.o中的.rela.text节信息（在hexedit中查看）

	对于其它符号的重定位过程，情形是相似的。
	4.【.rela.eh_frame】eh_frame节的重定位信息。
	5.【.symtab】符号表，用来存放程序中定义和引用的函数和全局变量的信息。 重定位需要引用的符号都在其中声明。

 
图4.6 hello.o中的剩余两节

4.4 Hello.o的结果解析
使用 objdump -d -r hello.o > hello.objdump （重定位到目标文件hello.objdump方便后续查阅）获得反汇编代码。  
总体观察图4.6后发现，除去显示格式之外“hello.o的反汇编程序”和“hello.s程序”两者差别不大，主要差别如下：
1.【分支转移】
反汇编代码跳转指令的操作数使用的不是段名称如.L3，因为段 名称只是在汇编语言中便于编写的助记符，所以在汇编成机器语言之后显 然不存在，而是确定的地址。
2.【函数调用】
在.s 文件中，函数调用之后直接跟着函数名称，而在反汇编程 序中，call 的目标地址是当前下一条指令。这是因为 hello.c 中调用的函数 都是共享库中的函数，最终需要通过动态链接器才能确定函数的运行时执 行地址，在汇编成为机器语言的时候，对于这些不确定地址的函数调用， 将其 call 指令后的相对地址设置为全 0（目标地址正是下一条指令），然 后在.rela.text 节中为其添加重定位条目，等待静态链接的进一步确定。
3.【全局变量访问】
在.s 文件中，访问 rodata（printf 中的字符串），使用段名称+%rip，在反汇编代码中 0+%rip，因为 rodata 中数据地址也是在运行时 确定，故访问也需要重定位。所以在汇编成为机器语言时，将操作数设置 为全 0 并添加重定位条目。

 
图4.6 反汇编代码中的main函数
4.5 本章小结
	本章主要介绍了汇编的概念、作用和ubuntu下的命令。
具体分析hello程序从hello.s到hello.o的汇编过程，重点考察了hello.o的ELF格式及其各部分基本信息。
比较hello.o反汇编得到的程序和hello.s汇编代码，明确了机器语言的构成及其与汇编语言的映射关系。特别比较了操作数、分支转移和函数调用等在机器语言和汇编语言中的的不一致。
